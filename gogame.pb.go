// Code generated by protoc-gen-gogo.
// source: github.com/fuserobotics/gogame/gogame.proto
// DO NOT EDIT!

/*
	Package gogame is a generated protocol buffer package.

	It is generated from these files:
		github.com/fuserobotics/gogame/gogame.proto

	It has these top-level messages:
		NetEntity
		NetComponent
		ComponentMeta
*/
package gogame

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

//
// Networked representation of an entity.
type NetEntity struct {
	Id        uint32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId  uint32          `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Component []*NetComponent `protobuf:"bytes,3,rep,name=component" json:"component,omitempty"`
}

func (m *NetEntity) Reset()                    { *m = NetEntity{} }
func (m *NetEntity) String() string            { return proto.CompactTextString(m) }
func (*NetEntity) ProtoMessage()               {}
func (*NetEntity) Descriptor() ([]byte, []int) { return fileDescriptorGogame, []int{0} }

func (m *NetEntity) GetComponent() []*NetComponent {
	if m != nil {
		return m.Component
	}
	return nil
}

//
// Networked representation of a component.
type NetComponent struct {
	// ID of implementation of component
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Initial state, deterministic message serialized
	InitData []byte `protobuf:"bytes,2,opt,name=init_data,json=initData,proto3" json:"init_data,omitempty"`
}

func (m *NetComponent) Reset()                    { *m = NetComponent{} }
func (m *NetComponent) String() string            { return proto.CompactTextString(m) }
func (*NetComponent) ProtoMessage()               {}
func (*NetComponent) Descriptor() ([]byte, []int) { return fileDescriptorGogame, []int{1} }

//
// Metadata for a component type.
type ComponentMeta struct {
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ComponentMeta) Reset()                    { *m = ComponentMeta{} }
func (m *ComponentMeta) String() string            { return proto.CompactTextString(m) }
func (*ComponentMeta) ProtoMessage()               {}
func (*ComponentMeta) Descriptor() ([]byte, []int) { return fileDescriptorGogame, []int{2} }

func init() {
	proto.RegisterType((*NetEntity)(nil), "gogame.NetEntity")
	proto.RegisterType((*NetComponent)(nil), "gogame.NetComponent")
	proto.RegisterType((*ComponentMeta)(nil), "gogame.ComponentMeta")
}
func (m *NetEntity) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NetEntity) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintGogame(data, i, uint64(m.Id))
	}
	if m.ParentId != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintGogame(data, i, uint64(m.ParentId))
	}
	if len(m.Component) > 0 {
		for _, msg := range m.Component {
			data[i] = 0x1a
			i++
			i = encodeVarintGogame(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NetComponent) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NetComponent) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintGogame(data, i, uint64(m.Id))
	}
	if len(m.InitData) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintGogame(data, i, uint64(len(m.InitData)))
		i += copy(data[i:], m.InitData)
	}
	return i, nil
}

func (m *ComponentMeta) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ComponentMeta) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintGogame(data, i, uint64(m.Id))
	}
	return i, nil
}

func encodeFixed64Gogame(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Gogame(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGogame(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *NetEntity) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGogame(uint64(m.Id))
	}
	if m.ParentId != 0 {
		n += 1 + sovGogame(uint64(m.ParentId))
	}
	if len(m.Component) > 0 {
		for _, e := range m.Component {
			l = e.Size()
			n += 1 + l + sovGogame(uint64(l))
		}
	}
	return n
}

func (m *NetComponent) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGogame(uint64(m.Id))
	}
	l = len(m.InitData)
	if l > 0 {
		n += 1 + l + sovGogame(uint64(l))
	}
	return n
}

func (m *ComponentMeta) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGogame(uint64(m.Id))
	}
	return n
}

func sovGogame(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGogame(x uint64) (n int) {
	return sovGogame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NetEntity) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGogame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetEntity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetEntity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGogame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGogame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ParentId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Component", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGogame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGogame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Component = append(m.Component, &NetComponent{})
			if err := m.Component[len(m.Component)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGogame(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGogame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetComponent) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGogame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGogame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGogame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGogame
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitData = append(m.InitData[:0], data[iNdEx:postIndex]...)
			if m.InitData == nil {
				m.InitData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGogame(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGogame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComponentMeta) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGogame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComponentMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComponentMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGogame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGogame(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGogame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGogame(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGogame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGogame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGogame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGogame
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGogame
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGogame(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGogame = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGogame   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorGogame = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xd2, 0x4e, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0x2b, 0x2d, 0x4e, 0x2d, 0xca, 0x4f, 0xca, 0x2f,
	0xc9, 0x4c, 0x2e, 0xd6, 0x4f, 0xcf, 0x4f, 0x4f, 0xcc, 0x4d, 0x85, 0x52, 0x7a, 0x05, 0x45, 0xf9,
	0x25, 0xf9, 0x42, 0x6c, 0x10, 0x9e, 0x94, 0x2e, 0x92, 0x26, 0xa0, 0x50, 0xbe, 0x3e, 0x58, 0x3a,
	0xa9, 0x34, 0x0d, 0xcc, 0x03, 0x73, 0xc0, 0x2c, 0x88, 0x36, 0xa5, 0x1c, 0x2e, 0x4e, 0xbf, 0xd4,
	0x12, 0xd7, 0xbc, 0x92, 0xcc, 0x92, 0x4a, 0x21, 0x3e, 0x2e, 0xa6, 0xcc, 0x14, 0x09, 0x46, 0x05,
	0x46, 0x0d, 0xde, 0x20, 0x20, 0x4b, 0x48, 0x9a, 0x8b, 0xb3, 0x20, 0xb1, 0x28, 0x35, 0xaf, 0x24,
	0x1e, 0x28, 0xcc, 0x04, 0x16, 0xe6, 0x80, 0x08, 0x78, 0xa6, 0x08, 0x19, 0x71, 0x71, 0x02, 0xed,
	0x28, 0xc8, 0xcf, 0x03, 0x72, 0x25, 0x98, 0x15, 0x98, 0x35, 0xb8, 0x8d, 0x44, 0xf4, 0xa0, 0x4e,
	0x02, 0x1a, 0xe9, 0x0c, 0x93, 0x0b, 0x42, 0x28, 0x53, 0xb2, 0xe6, 0xe2, 0x41, 0x96, 0xc2, 0x66,
	0x61, 0x66, 0x5e, 0x66, 0x49, 0x7c, 0x4a, 0x62, 0x49, 0x22, 0xd8, 0x42, 0x9e, 0x20, 0x0e, 0x90,
	0x80, 0x0b, 0x90, 0xaf, 0x24, 0xcf, 0xc5, 0x0b, 0xd7, 0xe9, 0x9b, 0x5a, 0x92, 0x88, 0xae, 0xdb,
	0x89, 0xe7, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x40, 0xfc, 0x00, 0x88, 0x93, 0xd8, 0xc0, 0x1e, 0x34,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x8c, 0xfd, 0xbd, 0xbb, 0x46, 0x01, 0x00, 0x00,
}
